#include <iostream>
#include <thread>
#include <vector>
#include <cmath>
#include <chrono>

using namespace std;
using namespace std::chrono;

const int n = 100000;
const int threads_count = 8;
vector<int> counts(threads_count, 0);

void thread_function(int id) {
	int arr[n];
	for (int i = 0; i < n; i++){
		arr[i] = i;
	}

	int kolvo = 0;
	int end = 0;
	int flow_size = n/threads_count;
	int start = id * flow_size;
	if(id == threads_count - 1){
		end = n;
	} else{
		end = (id + 1) * flow_size;
	}
	for (int i = start; i < end; i++){
		bool flag = true;
		if (arr[i] == 0 || arr[i] == 1){
				flag = false;
				}
			for (int j = 2; j <= sqrt(arr[i]); ++j){
				if (arr[i] % j == 0){
					flag = false;
					break;
				}
			}
			if(flag == true){
				kolvo++;
			}

		}
	counts[id] = kolvo;
}
int main() {
	    vector<thread> threads;

	    auto start = high_resolution_clock::now();

	    for (int i = 0; i < threads_count; ++i) {
	        threads.emplace_back(thread_function, i);
	    }

	    for (auto& t : threads) {
	        t.join();
	    }

	    int total = 0;
	    for (int kolvo : counts){
	    	total += kolvo;
	    }

	    auto end = high_resolution_clock::now();
	    cout<<"Total count: "<<total<<endl;
	    cout << "Time: " << duration_cast<milliseconds>(end - start).count() << " ms" << endl;

	    return 0;
}
