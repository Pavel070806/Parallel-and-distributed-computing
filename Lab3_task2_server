#include <boost/asio.hpp>
#include <boost/asio/thread_pool.hpp>
#include <boost/asio/post.hpp>
#include <iostream>
#include <string>
#include <sstream>

using boost::asio::ip::tcp;

void handle_client(tcp::socket socket) {
    try {
        boost::asio::streambuf buf;
        boost::asio::read_until(socket, buf, '\n');

        std::istream input(&buf);
        std::string data;
        std::getline(input, data);


        boost::asio::thread_pool pool(1);
        boost::asio::post(pool, [data, socket = std::move(socket)]() mutable {
            std::istringstream iss(data);
            int sum = 0, num;
            while (iss >> num) {
                sum += num;
            }

            std::string result = "Сумма: " + std::to_string(sum) + "\n";
            boost::asio::write(socket, boost::asio::buffer(result));
        });

        pool.join();
    } catch (std::exception& e) {
        std::cerr << "Ошибка клиента: " << e.what() << std::endl;
    }
}

int main() {
    try {
        boost::asio::io_context io;
        tcp::acceptor acceptor(io, tcp::endpoint(tcp::v4(), 1235));
        std::cout << "Сервер асинхронной суммы запущен на порту 1235.\n";

        while (true) {
            tcp::socket socket(io);
            acceptor.accept(socket);
            std::thread(handle_client, std::move(socket)).detach();
        }
    } catch (std::exception& e) {
        std::cerr << "Ошибка сервера: " << e.what() << std::endl;
    }
}
